#!/bin/bash
# Written by Charles Moye cmoye@digium.com
# Copyright 2012-2015 Charles Moye
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

# smart-test.sh
# Find and run basic smartmontools checks on all hard-drives
# Must be run as root or have sudo permissions for the current user for:
# smartctl, fdisk

#set -x;
. /usr/local/etc/disk-tools.sh
. /usr/local/etc/raid-tools.sh

init_smart_tests() {
  local vol="$1";
  echo -e "\n===============================================================================";
  echo "Initiating $vol, args: $SMARTCTL_ARGS";
  $SUDO $SMARTCTL $SMARTCTL_ARGS -i $vol 2>&1|\
      grep -E 'Model Family:|Device Model:|Serial Number:|User Capacity:';
  $SUDO $SMARTCTL $SMARTCTL_ARGS -s on -S on $vol 2>&1|grep SMART;
  #$SUDO $SMARTCTL $SMARTCTL_ARGS -c $vol;
  $SUDO $SMARTCTL $SMARTCTL_ARGS -H $vol 2>&1|grep "test result";
  echo -e "===============================================================================\n";
}

smart_test() {
  local vol="$1";
  local stest="$2";
  local drive="$3";
  local vol_message="$vol";
  [ ! -z "$drive" ] && vol_message="$vol drive $drive";
  echo -n "Run $stest test on $vol_message? [yN]: ";
  read y;
  if [ "$y" == "y" ] || [ "$y" == "Y" ]; then
    $SMARTCTL $SMARTCTL_ARGS -t $stest $vol
    echo -e "\nThis script does not check for test result(s)";
    echo "To check the results exit this script and run the check-smart script:";
    echo -e "  watch -n10 check-smart\n";
  else
    echo -e "\nNot testing $vol_message for $stest test\n";
  fi;
}

continue_pause() {
  local y=;
  echo "Press [Enter] to continue or [ctrl + c] to exit";
  read y;
}

process_raid() {
  local vol=;
  local index=$(expr ${#RAID_DRIVES[@]} - 1);
  local loops="$(seq 0 $index)";
  if [ "${RAID_DRIVES[0]}" == "no" ]; then
    loops=0;
  fi;
  local i=;
  # Init and run short for each volume and contained drive
  for vol in $SDXS; do
    for i in $loops; do
      [ "$loops" == "0" ] && RAID_DRIVES[$i]=0;
      SMARTCTL_ARGS="${RAID_ARGS[$i]}";
      init_smart_tests $vol;
    done;
    for i in $loops; do
      SMARTCTL_ARGS="${RAID_ARGS[$i]}";
      smart_test $vol "short" ${RAID_DRIVES[$i]};
    done;
  done;
  continue_pause;

  # Then run conveyance on each volume and contained drive
  for vol in $SDXS; do
    for i in $loops; do
      SMARTCTL_ARGS="${RAID_ARGS[$i]}";
      smart_test $vol "conveyance" ${RAID_DRIVES[$i]};
    done;
  done;
  continue_pause;

  # Then run long on each volume and contained drive
  for vol in $SDXS; do
    for i in $loops; do
      SMARTCTL_ARGS="${RAID_ARGS[$i]}";
      smart_test $vol "long" ${RAID_DRIVES[$i]};
    done;
  done;
  continue_pause;
  SMARTCTL_ARGS="";
}

process_direct() {
  # Build list of standard volumes
  list_disks;

  echo -e "\n\n\nFound these potential devices: ";
  echo $SDXS;
  echo;
  continue_pause;

  local vol=
  for vol in $SDXS; do
    init_smart_tests $vol;
    smart_test $vol "short";
  done;
  continue_pause;

  for vol in $SDXS; do
    smart_test $vol "conveyance";
  done;
  continue_pause;

  for vol in $SDXS; do
    smart_test $vol "long";
  done;
  continue_pause;
}

checkroot;
echo -e "\nWill present options for short, conveyance, and long tests";
echo -e "Do not select a test that is not supported by the drive\n";

identify_raid;
if [ "$RAID_PRESENT" -gt 0 ]; then
  process_raid;
else
  process_direct;
fi;

echo -e "\n\n\nPress [Enter] to reboot. [ctrl + c] to exit."
read y
reboot;
